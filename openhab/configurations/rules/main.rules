import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

//var Number counter = 1
var Timer timer = null

/*
rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end

rule "Crontest"
	when 
		Time cron "0/15 * * * * ?"
	then
		say(counter)
		counter = counter + 1
end	
*/

/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
 * and posting an updated state on the bus 
 */
rule "Dimmed Light"
	when
		Item DimmedLight received command
	then
		var Number percent = 0
		if(DimmedLight.state instanceof DecimalType) percent = DimmedLight.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(DimmedLight, percent);
end

/**
 * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
 * A selection widget in the UI provides easy access for this
 */
rule "Select Radio Station"
	when
		Item Radio_Station received command
	then
		switch(receivedCommand) {
			case 0 : playStream(null)
			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
		}
end

/**
 * This rules controls the volume on the local host
 */
rule "Volume control"
	when
		Item Volume received command
	then
		if(receivedCommand instanceof PercentType) {
			setMasterVolume(receivedCommand as PercentType)
		} else {
			if(receivedCommand==INCREASE) increaseMasterVolume(20)
			if(receivedCommand==DECREASE) decreaseMasterVolume(20)	
		}
		postUpdate(Volume, masterVolume * 100)
end

/*
rule "Say temperature on update"
	when 
		Item Weather_Temperature received update
	then
		say("The temperature outside is " + Weather_Temperature.state.format("%d") + " degrees celsius")
end
*/

/**
 * The following rules help initializing the demo items with some helpful states.
 */
 /* 
rule "Initialize light states"
	when
		System started
	then
		//Lights?.members.forEach(light|
		//	postUpdate(light, if(Math::random > 0.7) ON else OFF)
		//)
end
*/

rule "Initialize high limit setpoint"
	when 
		System started
	then
		postUpdate(High_Setpoint, 40)
		HSPA?.members.forEach(spa|
			postUpdate(spa, 40)
		)
		
		Alarm?.members.forEach(alarm|
			postUpdate(alarm, OPEN)
		)
end
/*
rule "Initialize contact states"
	when 
		System started
	then
		Windows?.members.forEach(window|
			postUpdate(window, if(Math::random > 0.5) OPEN else CLOSED)
		)
end
*/
rule "Set random heart rate"
	when 
		//System started or
		System started
		//Time cron "0/5 * * * * ?"
	then
		Heartrate?.members.forEach(heartrate|
			postUpdate(heartrate, 80.0 + (25.0 - (Math::random * 50.0).intValue) / 10.0)
		)
end

rule "Set random room temperatures"
	when 
		//System started or
		System started
		//Time cron "0 * * * * ?"
	then
		Temperature?.members.forEach(temperature|
			postUpdate(temperature, 35.0 + (25.0 - (Math::random * 50.0).intValue) / 10.0)
		)
end

rule "Update max and min temperatures"
when
	Item Weather_Temperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)
end

rule "Buzzer command"
when
	Item Light_RMA_P1 received command
then
	if(receivedCommand==ON) {
	sendHttpPostRequest("http://192.168.1.200/buz","Content-Type: application/json", "1")
	
	} else if(receivedCommand==OFF) {

	sendHttpPostRequest("http://192.168.1.200/buz","Content-Type: application/json", "0")
	}
end

rule "set alarm 1"
when
	Item Temperature_RMA_P1 changed or
 	Time cron "0/10 * * * * ?"
then
	var Number temp = 0
	var Number highlmt = 0
	if(Temperature_RMA_P1.state instanceof DecimalType) temp = Temperature_RMA_P1.state as DecimalType
	if(HSPA_RMA_P1.state instanceof DecimalType) highlmt = HSPA_RMA_P1.state as DecimalType
	if (temp >= highlmt) {
		postUpdate(HLAlarm_RMA_P1, CLOSED)
 		say("Patient 1 high body temperature")
 		//playSound("doorbell.mp3")
 		println("Alarm 1")
 	}   else
 	postUpdate(HLAlarm_RMA_P1, OPEN)
end

rule "set alarm 2"
when
	Item Temperature_RMA_P2 changed or
 	Time cron "0/10 * * * * ?"
then
	var Number temp = 0
	var Number highlmt = 0
	if(Temperature_RMA_P2.state instanceof DecimalType) temp = Temperature_RMA_P2.state as DecimalType
	if(HSPA_RMA_P2.state instanceof DecimalType) highlmt = HSPA_RMA_P2.state as DecimalType
	if (temp >= highlmt) {
		postUpdate(HLAlarm_RMA_P2, CLOSED)
 		say("Patient 2 high body temperature")
 		println("Alarm 2")
 	}   else
 	postUpdate(HLAlarm_RMA_P2, OPEN)
end

rule "set alarm 3"
when
	Item Temperature_RMB_P3 changed or
 	Time cron "0/10 * * * * ?"
then
	var Number temp = 0
	var Number highlmt = 0
	if(Temperature_RMB_P3.state instanceof DecimalType) temp = Temperature_RMB_P3.state as DecimalType
	if(HSPA_RMB_P3.state instanceof DecimalType) highlmt = HSPA_RMB_P3.state as DecimalType
	if (temp >= highlmt) {
		postUpdate(HLAlarm_RMB_P3, CLOSED)
 		say("Patient 3 high body temperature")
 		//playSound("doorbell.mp3")
 		println("Alarm 3")
 	}   else
 	postUpdate(HLAlarm_RMB_P3, OPEN)
end

/** shows how to use sensor values from the past */
rule "Persistence Demo"
when
	Time cron "0 * * * * ?"
then	
	if(Weather_Temperature.changedSince(now.minusMinutes(1))) {
		println("2 minutes ago, the temperature was " + Weather_Temperature.historicState(now.minusMinutes(2)) + " degrees.")		
	}
end

/** 
 * shows how to check recent switch states - very helpful to avoid executing something too often, just
 * because somebody presses a button too often (e.g. sending a notification, if the doorbell button is pressed)
 */
rule "Persistence Demo 2"
when
	Item DemoSwitch received command
then
	if(!DemoSwitch.changedSince(now.minusSeconds(5))) {
		logInfo("Persistence Demo", "You did not press this button during the last 5 seconds!")
	}
end

rule "Timer Demo"
when
	Item DemoSwitch received command
then
	if(receivedCommand==ON) {
		if(timer==null) {
			// first ON command, so create a timer to turn the light off again
			timer = createTimer(now.plusSeconds(10)) [|
				sendCommand(DemoSwitch, OFF)
			]
		} else {
			// subsequent ON command, so reschedule the existing timer
			timer.reschedule(now.plusSeconds(10))
		}
	} else if(receivedCommand==OFF) {
		// remove any previously scheduled timer
		if(timer!=null) {
			timer.cancel
			timer = null
		}	
	}
end
